//require db host information from db file in utils
const db = require('../util/db');
//create a getUser controller function that accepts a req and res object, this should return all users where the condition set by the query are true.
const getUsers = (req,res) => {
    //this is a variable where we will store the value of the SQL query for this route's callback function
    //here we are getting the user id, first and last name, and their address
    const sqlQuery = 'select user_id, first_name, last_name, address from users'
    db.query(sqlQuery, (err, rows) => {
        //if we have an error we want to log this
        if (err) {
            console.log(`"getUsers" query failed: ${err}`);
            res.sendStatus(500);// 500 because error was due to a problem with the backend.
        } else {
            //if no error, we want to send the data from the query.
            res.json(rows);
        }
    });
};
//this function will take in a req,res object, and it will return a single user based on the id provided in the path param submitted in the req
//if the id is not in the db the res will be null, otherwise the return will be the entire user.
const getUsersByID = (req, res) => {
    //this is a variable where we will store the value of the SQL query we will use this in the sqlQuery below to make the query dynamic base on the user's input.
    const userID = req.params.id;
    //if the user is not sending an ID, send a 400 status code and exit the function.
    if (!userID) {
        res.sendStatus(400);
        return;
    }
    // storing the SQL query to a variable, this query will return the user ID, first_name, last_name, address, email, phone, username, and the user_password Using the userID variable to finalize the query.
    const sqlQuery = `select user_id, first_name, last_name, address, email, phone, username, user_password from users where user_id = ?`; //!no password
    // saving params array as a variable.
    const params = [userID];

    db.query(sqlQuery, params, (err, rows) => {
        // if err, log and send err code
        if (err) {
            console.log(`"getUsersByID" query failed: ${err}`);
            res.sendStatus(500); //500 because error was due to a problem with the backend.
        } else {
            // If else statement to handle possible responses.
            // If greater than 1 row returned...
            if (rows.length > 1) {
                console.log(
                    'More than 1 row was returned for id:',
                    userID
                );
                res.sendStatus(500); //# Sending 500 because there is something wrong with the backend.
            }
            // If no rows returned we will send back null to the client. Request is good, but there are no matching records.
            else if (rows.length === 0) {
                res.json(null);
            }
            // Sending back the first record from the rows object to the client. If there is data the object will have a length of 1. The first record will be at index position 0.
            else {
                res.json(rows[0]);
            }
        }
    });
};
//need a function to post a new user, this request should include a json object in the request that includes first_name, last_name, address, email, phone, username, and the user_password
//user_id is autogenerated in the table in my db
//once the function has created the item in the db we will want to return it tp the client
const postNewUser = (req, res) => {
    const sqlQuery =
        'insert into users (first_name, last_name, address, email, phone, username, user_password) VALUES (?, ?, ?, ?, ?, ?, ?)';
    //saving params array as a variable. Each "?" above will be replaced in order by the items indicated in the array.
    const params = [
        req.body.firstName,
        req.body.lastName,
        req.body.address,
        req.body.email,
        req.body.phone,
        req.body.username,
        req.body.userPassword,
    ];
    db.query(sqlQuery, params, (err, rows) => {
        if (err) {
            console.log('"postNewUser" route failed', err);
            res.sendStatus(500); //500 because error likely will originate from the backend.
        } else {
            console.log('User Created: ', rows);
            const resSqlQuery = `select user_id, first_name, last_name, address, email, phone, username, user_password from users where user_id = ?`;
            const params = [rows.insertId];
            //running another query to return the entire object of the newly created user.
            db.query(resSqlQuery, params, (err, rows) => {
                // if err, we want to send an error code and log the error.
                if (err) {
                    console.log(`"create new user response" query failed: ${err}`);
                    res.sendStatus(500); // # Sending 500 because error was due to a problem  with the backend.
                } else {
                    // if else statement to handle possible responses.
                    // if greater than 1 row returned...
                    if (rows.length > 1) {
                        console.log(
                            'More than 1 row was returned for id:',
                            userID
                        );
                        res.sendStatus(500); //500 because there is something wrong with the backend.
                    }
                    // if no rows returned we will send back null to the client. Request is good, but there are no matching records.
                    else if (rows.length === 0) {
                        res.json(null);
                    }
                    // sending back the first record from the rows object to the client. If there is data the object will have a length of 1. The first record will be at index position 0.
                    else {
                        res.json(rows[0]);
                    }
                }
            });
        }
    });
};
//update function
//this function will take the req,res objects and update a single user based on teh path param submitted along with the request
//if the id is invalid the res will be null
const updateUser = (req, res) => {
    // creating a variable to store the path parameter, we will use this in the sqlQuery below to make the query dynamic based on the user's input.
    const userID = req.params.id;
    // if the client is not sending an ID, send a 400 status code and exit the function.
    //console.log("what user ID are we working with",userID)
    if (!userID) {
        console.log("what user ID are we working with",userID)
        res.sendStatus(400);
        return;
    }
    // storing the SQL query to a variable. Using parameterized SQL statements.
    const sqlQuery = 'UPDATE users SET ? WHERE user_id = ?';
    db.query(sqlQuery, [req.body, userID], (err, rows) => {
        if (err) {
            console.log(`The updateUser route was not successful: ${err}`);
            res.sendStatus(500); // 500 because error likely will originate from the backend.
        } else {
            const resSqlQuery = `select user_id, first_name, last_name, address, email, phone, username, user_password from users where user_id = ?`;
            // saving params array as a variable.
            const resParams = [userID];
            db.query(resSqlQuery, resParams, (err, rows) => {
                // if err, we want to send an error code and log the error.
                if (err) {
                    console.log(`The "getUsersByID" query failed: ${err}`);
                    res.sendStatus(500); //500 because error was due to a problem  with the backend.
                } else {
                    // if else statement to handle possible responses.
                    // i greater than 1 row returned...
                    if (rows.length > 1) {
                        console.log(
                            'More than 1 row was returned for id:',
                            userID
                        );
                        res.sendStatus(500); //# Sending 500 because there is something wrong with the backend.
                    }
                    // if no rows returned we will send back null to the client. Request is good, but there are no matching records.
                    else if (rows.length === 0) {
                        res.json(null);
                    }
                    // sending back the first record from the rows object to the client. If there is data the object will have a length of 1. The first record will be at index position 0.
                    else {
                        res.json(rows[0]);
                    }
                }
            });
        }
    });
};
//delete
// this function will delete a user based on a provided user id inside the path params
//the response will contain the num of rows deleted
const deleteUser = (req, res) => {
    // creating a variable to store the path parameter.
    // we will use this in the sqlQuery below to make the query dynamic base on the user's input.
    const userID = req.params.id;
    // if client is not sending an ID, send a 400 status code and exit the function.
    if (!userID) {
        res.sendStatus(400);
        return;
    }
    // storing the SQL query to a variable.
    // using parameterized SQL statements.
    const sqlQuery = 'DELETE FROM users WHERE user_id = ?';
    const params = [userID];
    db.query(sqlQuery, params, (err, rows) => {
        if (err) {
            console.log('The deleteUser route failed', err);
            res.sendStatus(500); //500 because error likely will originate from the backend.
        } else {
            console.log(`Number of records deleted: ${rows.affectedRows}`);
            // sending the number of rows that have been deleted
            res.json(rows.affectedRows);
        }
    });
};

// exporting route functions
module.exports = {
    getUsers,
    getUsersByID,
    postNewUser,
    updateUser,
    deleteUser,
};